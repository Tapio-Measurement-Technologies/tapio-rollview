name: Build Executable

on:
  push:
    tags:
      - '*'
  workflow_dispatch:




jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.12']
        include:
          - os: ubuntu-latest
            platform: linux
            extension: ""
          - os: windows-latest
            platform: windows
            extension: ".exe"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # - name: Compile translation files (linux)
      #   shell: bash
      #   run: |
      #     mkdir -p src/locales/LC_MESSAGES/
      #     for po_file in translations/messages_*.po; do
      #       lang=$(basename "$po_file" | cut -d'_' -f2 | cut -d'.' -f1)
      #       mkdir -p "src/locales/LC_MESSAGES/$lang"
      #       msgfmt "$po_file" -o "src/locales/LC_MESSAGES/$lang/messages.mo"
      #     done
      #   if: runner.os == 'Linux'

      # - name: Compile translation files (windows)
      #   shell: pwsh
      #   run: |
      #     New-Item -ItemType Directory -Path src/locales/LC_MESSAGES -Force
      #     Get-ChildItem translations/messages_*.po | ForEach-Object {
      #       $lang = $_.BaseName -replace 'messages_', ''
      #       New-Item -ItemType Directory -Path "src/locales/LC_MESSAGES/$lang" -Force
      #       msgfmt $_.FullName -o "src/locales/LC_MESSAGES/$lang/messages.mo"
      #     }
      #   if: runner.os == 'Windows'

      - name: Build executable
        run: >
          pyinstaller
          --clean
          --onefile
          --noconsole
          --add-data "src/postprocessors/:postprocessors/"
          --add-data "src/assets/fonts/:assets/fonts/"
          --add-data "src/locales/:locales/"
          --hidden-import pandas
          --icon src/assets/tapio_favicon.ico
          src/main.py

      - name: Rename executable
        run: >
          mv
          dist/main${{ matrix.extension }}
          dist/rollview-${{ github.ref_name }}-${{ matrix.platform }}${{ matrix.extension }}

      - name: Compress executable (Linux)
        if: runner.os == 'Linux'
        run: |
          zip dist/rollview-${{ github.ref_name }}-${{ matrix.platform }}.zip \
          dist/rollview-${{ github.ref_name }}-${{ matrix.platform }}${{ matrix.extension }}

      - name: Compress executable (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive -Path "dist/rollview-${{ github.ref_name }}-${{ matrix.platform }}${{ matrix.extension }}" `
          -DestinationPath "dist/rollview-${{ github.ref_name }}-${{ matrix.platform }}.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rollview-${{ github.ref_name }}-${{ matrix.platform }}.zip
          path: dist/rollview-${{ github.ref_name }}-${{ matrix.platform }}.zip



  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download Artifact (linux)
        uses: actions/download-artifact@v4
        with:
          name: rollview-${{ github.ref_name }}-linux.zip
          path: dist/

      - name: Download Artifact (windows)
        uses: actions/download-artifact@v4
        with:
          name: rollview-${{ github.ref_name }}-windows.zip
          
          path: dist/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Extract Windows Executable
        run: |
          cd dist
          unzip rollview-${{ github.ref_name }}-windows.zip

      - name: Upload Release Asset (linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/rollview-${{ github.ref_name }}-linux.zip
          asset_name: rollview-${{ github.ref_name }}-linux.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/rollview-${{ github.ref_name }}-windows.zip
          asset_name: rollview-${{ github.ref_name }}-windows.zip
          asset_content_type: application/zip

      - name: Upload Release Executable (windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/rollview-${{ github.ref_name }}-windows.exe
          asset_name: rollview-${{ github.ref_name }}-windows.exe
          asset_content_type: application/octet-stream



